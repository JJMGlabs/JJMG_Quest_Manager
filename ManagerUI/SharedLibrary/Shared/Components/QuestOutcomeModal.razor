@using Microsoft.AspNetCore.Components.Forms
@using QuestManagerSharedResources.Model
@using QuestManagerSharedResources.Model.Enums
@using QuestManagerSharedResources.QuestSubObjects
@using SharedLibrary.Data.Callback
@using SharedLibrary.Data.Enum

@inherits QuestSubObjectModal

@{
    base.BuildRenderTree(__builder);
}

@code {
    protected override void OnInitialized()
    {
        questOutcome = (QuestOutcome)DialogTarget;

        if (questOutcome.MeasurementDependancyIds == null)
            questOutcome.MeasurementDependancyIds = new List<string>();


        if (questOutcome.GameEventDependancyIds == null)
            questOutcome.GameEventDependancyIds = new List<string>();


        MeasureIdListBindings();

        ChildComponent = (__builder) =>
        {
            <div class="form-group">
                <label for="measure" class="form-label">Dependant On Measurements IDs</label>
                <input id="measure" @bind="@MeasurementIdToAdd" class="form-control" type="text" placeholder="Enter a valid Event ID">
                <button @onclick="AddMeasureId" class="btn btn-primary">Add</button>
                <ul class="list-group">
                    @foreach (var item in measureListBinding)
                    {
                        <li class="list-group-item">
                            <input id="id" @bind="@item.Value" class="form-control" type="text" placeholder="@item">
                            <button @onclick="(() => UpdateMeasureId(item.Index,item.Value))" class="btn btn-secondary">Update</button>
                            <button @onclick="(() => DeleteMeasureId(item.Index))" class="btn btn-danger">Delete</button>
                        </li>
                    }
                </ul>

            </div>
            <div class="form-group">
                <label for="gEvent" class="form-label">Dependant On Game Event IDs</label>
                <input id="gEvent" @bind="@GameEventIdToAdd" class="form-control" type="text" placeholder="Enter a valid Event ID">
                <button @onclick="AddGameEventId" class="btn btn-primary">Add</button>
                <ul class="list-group">
                    @foreach (var item in gameEventListBinding)
                    {
                        <li class="list-group-item">
                            <input @bind="@item.Value" class="form-control" type="text" placeholder="@item">
                            <button @onclick="(() => UpdateGameEventId(item.Index,item.Value))" class="btn btn-secondary">Update</button>
                            <button @onclick="(() => DeleteGameEventId(item.Index))" class="btn btn-danger">Delete</button>
                        </li>
                    }
                </ul>

            </div>
            <DictionaryInput @bind-dictionary="@questOutcome.DeliveryMetadata" Label="Delivery Metadata" />
            <OutcomeQuestInput @bind-dictionary="@questOutcome.DeliveryMetadata" />
        };
        base.OnInitialized();
    }

    string MeasurementIdToAdd;

    private QuestOutcome questOutcome;

    private List<ListBinding> measureListBinding = new List<ListBinding>();

    void AddMeasureId()
    {
        if (!string.IsNullOrWhiteSpace(MeasurementIdToAdd))
        {
            questOutcome.MeasurementDependancyIds.Add(MeasurementIdToAdd);
            MeasurementIdToAdd = string.Empty;
            MeasureIdListBindings();
        }
    }

    void UpdateMeasureId(int index, string id)
    {
        questOutcome.MeasurementDependancyIds[index] = id;
        MeasureIdListBindings();
    }

    void DeleteMeasureId(int index)
    {
        questOutcome.MeasurementDependancyIds.RemoveAt(index);
        MeasureIdListBindings();
    }

    void MeasureIdListBindings()
    {
        measureListBinding.Clear();

        for (int i = 0; i < questOutcome.MeasurementDependancyIds.Count; i++)
            measureListBinding.Add(new ListBinding(i, questOutcome.MeasurementDependancyIds[i]));
    }

    string GameEventIdToAdd;

    private List<ListBinding> gameEventListBinding = new List<ListBinding>();

    void AddGameEventId()
    {
        if (!string.IsNullOrWhiteSpace(GameEventIdToAdd))
        {
            questOutcome.GameEventDependancyIds.Add(GameEventIdToAdd);
            GameEventIdToAdd = string.Empty;
            GameEventIdListBindings();
        }
    }

    void UpdateGameEventId(int index, string id)
    {
        questOutcome.GameEventDependancyIds[index] = id;
        GameEventIdListBindings();
    }

    void DeleteGameEventId(int index)
    {
        questOutcome.GameEventDependancyIds.RemoveAt(index);
        GameEventIdListBindings();
    }

    void GameEventIdListBindings()
    {
        gameEventListBinding.Clear();

        for (int i = 0; i < questOutcome.GameEventDependancyIds.Count; i++)
            gameEventListBinding.Add(new ListBinding(i, questOutcome.GameEventDependancyIds[i]));
    }


    private class ListBinding
    {
        public int Index { get; set; }
        public string Value { get; set; }
        public ListBinding(int index, string value)
        {
            Index = index;
            Value = value;
        }
    }
}
